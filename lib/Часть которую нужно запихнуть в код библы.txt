class NoAnimNavigationIndicator extends NavigationIndicator {
  /// Creates a sticky navigation indicator.
  const NoAnimNavigationIndicator({
    super.curve,
    super.color,
    super.duration,
    this.topPadding = 12.0,
    this.leftPadding = kPaneItemMinHeight * 0.3,
    this.indicatorSize = 2.75,
  });

  /// The padding used on both horizontal sides of the indicator when the
  /// current display mode is top.
  ///
  /// Defaults to 12.0
  final double topPadding;

  /// The padding used on both vertical sides of the indicator when the current
  /// display mode is not top.
  ///
  /// Defaults to 10.0
  final double leftPadding;

  /// The size of the indicator.
  ///
  /// On top display mode, this represents the height of the indicator. On other
  /// display modes, this represents the width of the indicator.
  ///
  /// Defaults to 2.0
  final double indicatorSize;

  @override
  NavigationIndicatorState<NoAnimNavigationIndicator> createState() =>
      _NoAnimNavigationIndicatorState();
}

class _NoAnimNavigationIndicatorState
    extends NavigationIndicatorState<NoAnimNavigationIndicator>
    with TickerProviderStateMixin, AutomaticKeepAliveClientMixin {
  late AnimationController upController;
  late AnimationController downController;

  @override
  void initState() {
    super.initState();
    upController = AnimationController(
      vsync: this,
      duration: widget.duration,
      value: 1.0,
    );
    downController = AnimationController(
      vsync: this,
      duration: widget.duration,
      value: 1.0,
    );
  }

  Animation<double>? upAnimation;
  Animation<double>? downAnimation;

  int _old = -1;

  @override
  void dispose() {
    upController.dispose();
    downController.dispose();
    super.dispose();
  }

  bool get isShowing {
    if (itemIndex.isNegative) return false;

    if (itemIndex == selectedIndex) return true;
    return itemIndex == previousItemIndex && _old != previousItemIndex;
  }

  bool get isAbove => previousItemIndex < selectedIndex;
  bool get isBelow => previousItemIndex > selectedIndex;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    animate();
  }

  Future<void> animate() async {
    if (!mounted) {
      return;
    }

    _old = (PageStorage.of(context).readState(
          context,
          identifier: 'previousItemIndex$itemIndex',
        ) as num?)
            ?.toInt() ??
        _old;
    // do not perform the animation twice
    if (_old == previousItemIndex) {
      return;
    }

    // if (isShowing) {
    //   if (isBelow) {
    //     if (isSelected) {
    //       downAnimation = Tween<double>(begin: 0, end: 1.0).animate(
    //         CurvedAnimation(
    //           curve: Interval(0.5, 1.0, curve: widget.curve),
    //           parent: downController,
    //         ),
    //       );
    //       upAnimation = null;
    //       downController.forward(from: 0.0);
    //     } else {
    //       upAnimation = Tween<double>(begin: 0, end: 1.0).animate(
    //         CurvedAnimation(curve: widget.curve, parent: upController),
    //       );
    //       downAnimation = null;
    //       upController.reverse(from: 1.0);
    //     }
    //   } else if (isAbove) {
    //     if (isSelected) {
    //       upAnimation = Tween<double>(begin: 0, end: 1.0).animate(
    //         CurvedAnimation(
    //           curve: Interval(0.5, 1.0, curve: widget.curve),
    //           parent: upController,
    //         ),
    //       );
    //       downAnimation = null;
    //       upController.forward(from: 0.0);
    //     } else {
    //       downAnimation = Tween<double>(begin: 0, end: 1.0).animate(
    //         CurvedAnimation(curve: widget.curve, parent: downController),
    //       );
    //       upAnimation = null;
    //       downController.reverse(from: 1.0);
    //     }
    //   }
    // }

    _old = previousItemIndex;
    if (mounted) {
      PageStorage.of(context).writeState(
        context,
        _old,
        identifier: 'previousItemIndex$itemIndex',
      );
      setState(() {});
    }
  }

  @override
  Widget build(BuildContext context) {
    if (offsets == null || !isShowing || selectedIndex.isNegative) {
      return const SizedBox.shrink();
    }

    // Ensure it is only kept alive after if it's showing and after the offets
    // are fetched
    super.build(context);
    assert(debugCheckHasFluentTheme(context));

    final theme = NavigationPaneTheme.of(context);
    final isHorizontal = axis == Axis.horizontal;

    final decoration = BoxDecoration(
      color: widget.color ?? theme.highlightColor,
      borderRadius: BorderRadius.circular(100),
    );

    return SizedBox(
      height: double.infinity,
      child: IgnorePointer(
        child: AnimatedBuilder(
          animation: Listenable.merge([upController, downController]),
          child: isHorizontal
              ? Align(
                  alignment: AlignmentDirectional.centerStart,
                  child: Container(
                    width: widget.indicatorSize,
                    decoration: decoration,
                  ),
                )
              : Align(
                  alignment: AlignmentDirectional.bottomCenter,
                  child: Container(
                    height: widget.indicatorSize,
                    decoration: decoration,
                  ),
                ),
          builder: (context, child) {
            if (!isSelected) {
              if (upController.status == AnimationStatus.dismissed ||
                  downController.status == AnimationStatus.dismissed) {
                return const SizedBox.shrink();
              }
            }
            return Padding(
              padding: isHorizontal
                  ? EdgeInsetsDirectional.only(
                      start: () {
                        final x = offsets!.elementAt(itemIndex).dx;
                        if (parent != null) {
                          final isOpen =
                              parent!.expanderKey.currentState?._open ?? false;
                          if (isOpen) {
                            return x + _PaneItemExpander.leadingPadding.start;
                          }

                          final parentIndex =
                              pane.effectiveItems.indexOf(parent!);
                          final parentX = offsets!.elementAt(parentIndex).dx;
                          return parentX;
                        }
                        return x;
                      }(),
                      top: widget.leftPadding * (upAnimation?.value ?? 1.0),
                      bottom:
                          widget.leftPadding * (downAnimation?.value ?? 1.0),
                    )
                  : EdgeInsetsDirectional.only(
                      start: widget.topPadding * (upAnimation?.value ?? 1.0),
                      end: widget.topPadding * (downAnimation?.value ?? 1.0),
                    ),
              child: child,
            );
          },
        ),
      ),
    );
  }

  @override
  bool get wantKeepAlive => true;
}